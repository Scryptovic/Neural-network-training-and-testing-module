# -*- coding: utf-8 -*-
"""Neural_network_module (2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11S_peqjU6UQXvVC2Ep2uvV5dltbz9Kq5

# Neural network module

**Подключим библиотеки и создадим модель нейросети с помощью фреймворка tensorflow**
"""

import numpy as np
import tensorflow as tf
import pandas as pd
import csv
from tensorflow.keras.datasets import mnist

def create_model():
    model = tf.keras.Sequential([
        tf.keras.layers.Flatten(input_shape=(28, 28)),
        tf.keras.layers.Dense(100, activation='relu'),
        tf.keras.layers.Dense(100, activation='relu'),
        tf.keras.layers.Dense(10, activation='softmax')
    ])
    return model


model = create_model()

"""**Загрузим граф связей и уберем индивидуальные номера агентов**"""

matrix_np = np.genfromtxt('/content/agent_connections_matrix.csv', delimiter=';', dtype=str)

first_column = matrix_np[:, 0]
matrix_np = matrix_np[:, 1:]


first_row = matrix_np[0]
matrix_np = matrix_np[1:, :]
matrix_np = np.array(matrix_np, dtype=float)

"""**Выгрузим веса нейронной сети**"""

weights = model.get_weights()

weights

"""**Загрузим граф связей в качестве весов между 2 скрытыми слоями и посмотрим на обновленные веса**"""

weights = matrix_np

model.layers[2].set_weights([weights, np.zeros(100, dtype=np.float32)])


model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

weights = model.get_weights()
weights

"""**Обучим модель с нашими весами и посмотрим на результат**"""

(train_images, train_labels), (test_images, test_labels) = mnist.load_data()


train_images = train_images / 255.0
test_images = test_images / 255.0

model.fit(train_images, train_labels, epochs=1, batch_size=32, validation_data=(test_images, test_labels))

test_loss, test_accuracy = model.evaluate(test_images, test_labels)
print('Test loss:', test_loss)
print('Test accuracy:', test_accuracy)

weights = model.get_weights()
weights

"""**Выгрузим обновленные веса и сохраним их**"""

df = weights[2]

matrix_np = df

matrix_np = np.array(matrix_np, dtype=str)

matrix_np

matrix_np = np.insert(matrix_np, 0, first_row, axis=0)
matrix_np = np.insert(matrix_np, 0, first_column, axis=1)

with open('modified_matrix2.csv', 'w', newline='') as csvfile:
    writer = csv.writer(csvfile, delimiter=';')
    writer.writerows(matrix_np)

"""**Теперь можно адаптировать наш граф связей под приложение gelphi. Для этого запустите следующую ячейку**"""

import pandas as pd


matrix = pd.read_csv('/content/modified_matrix2.csv', sep = ';', header=None)


source = []
target = []
weight = []
color = []
type_ = []

for i in range(1, 101):
    source.append(matrix.iloc[i, 0])
    target.append(matrix.iloc[i, 0])
    weight.append(1)
    color.append(0)
    type_.append('undirected')

    for j in range(1, 101):
        if i != j:
            current_color = matrix.iloc[i, j]
            if current_color >= 1.0:
                source.append(matrix.iloc[i, 0])
                target.append(matrix.iloc[0, j])
                weight.append(1)
                color.append(current_color)
                type_.append('undirected')

data = {
    'Source': source,
    'Target': target,
    'Weight': weight,
    'Color': color,
    'Type': type_
}
table = pd.DataFrame(data)
table['Target'] = table['Target'].astype(int)


table.to_csv('Weights2.csv', sep=';', index=False)